function runFinalProject(varargin)
% runFinalProject is the "main" interface that lets you execute all the 
% functions for our final project.
%
% Usage:
% runFinalProject                       : list all the registered functions
% runFinalProject('function_name')      : execute a specific test
% runFinalProject('all')                : execute all the registered functions

% Settings to make sure images are displayed without borders.
orig_imsetting = iptgetpref('ImshowBorder');
iptsetpref('ImshowBorder', 'tight');
temp1 = onCleanup(@()iptsetpref('ImshowBorder', orig_imsetting));

fun_handles = {@getData};
% Make sure you download runTests.m as well!
% Call test harness
runTests(varargin, fun_handles);

%%
function getData()
D = uigetdir; % lets the user choose which folder of images they want to analyze
% D = 'datasets/celebrities/sandra_oh'; %jpeg 
% D = 'datasets/celebrities/nick_jonas'; % mix of jpg and jpeg
S = [dir(fullfile(D,'*.jpeg'));dir(fullfile(D,'*.jpg'))];  % pattern to match filenames.

if numel(S) == 0
    disp("Didn't find any photos to analyze...");
else
    blur_container = getBlur(D,S); % returns amount of blur w/img title name
    amount_of_color_container = getHueCount(D,S); % returns amount of unique colors w/img title name
    amount_of_lightness_container = applyGetPLightness(D,S); % returns amount of lightness w/img title name
    eyes_open_container = getEyesOpen(D,S); % returns if eyes are open w/ img title name
    rot_container = getRuleOfThirds(D,S);
    
     maxImg, minImg, curMax, curMin, final_ranks = rank(S, blur_container, amount_of_color_container, amount_of_lightness_container, eyes_open_container, rot_container);

end

%% rank the images based off the data we got back
function maxImg, minImg, curMax, curMin, final_ranks = rank(S, bc, cc, lc, eoc, rotc)
maxImg = 0;
minImg = realmax;
curMax = 0; 
curMin = 0;

num_imgs = numel(S);
final_ranks = containers.Map('KeyType','char','ValueType','double');


for imgNum = 1:numel(S)
    final_ranks(S(imgNum).name) = 0;
    
    % Blur count number / num images is the score for this image
    blur_count = bc(S(imgNum).name) / num_imgs;
    final_ranks(S(imgNum).name) = final_ranks(S(imgNum).name) + blur_count;
    
    % Hue count number / num images is the score for this image
    hue_count = cc(S(imgNum).name) / num_imgs;
    final_ranks(S(imgNum).name) = final_ranks(S(imgNum).name) + hue_count;
    
     % Lightness count number / num images is the score for this image
    light_count = lc(S(imgNum).name) / num_imgs;
    final_ranks(S(imgNum).name) = final_ranks(S(imgNum).name) + light_count;
    
    % Eyes open T/F = +100, or - 100 is the score for this image
    eyes_open = eoc(S(imgNum).name);
    if eyes_open
        final_ranks(S(imgNum).name) = final_ranks(S(imgNum).name) + 100;
    else
        final_ranks(S(imgNum).name) = final_ranks(S(imgNum).name) - 100;
    end
    
    % Rule of Thirds T/F = +100, or - 100 is the score for this image

    rule_of_thirds = rotc(S(imgNum).name);
    if rule_of_thirds
        final_ranks(S(imgNum).name) = final_ranks(S(imgNum).name) + 100;
    else
        final_ranks(S(imgNum).name) = final_ranks(S(imgNum).name) - 100;
    end
    
    if final_ranks(S(imgNum).name) > maxImg
        maxImg = measureOrigIm;
        curMax = imgNum;
%         disp('in max')
    end
    if measureOrigIm < minImg
        minImg = measureOrigIm;
        curMin = imgNum;
%         disp('in min')
    end
end
